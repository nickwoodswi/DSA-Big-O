In this example, we return to the problem of searching using a more sophisticated approach than in naive search, above. Assume that the input array is always sorted. What is the Big O of the following algorithm? Explain your answer

function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) { 
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {  
            minIndex = currentIndex + 1;  
        }
        else if (currentElement > item) { 
            maxIndex = currentIndex - 1;
        }
        else { 
            return currentIndex;
        }
        
    }
    return -1;
}

4 = O(1)
5 = O(1)
6 = O(1)
7 = O(1)
9 = O(n)
  10 = O(1)
  11 = O(1)
  13 = O(1)
  16 = O(1)
  19 = O(1)
  14 + 17 + 20 = O(1)
24 = O(1)

BigO(n*6 + 5)
